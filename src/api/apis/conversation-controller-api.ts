/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CompleteConversationOutputDTO } from '../models';
// @ts-ignore
import type { CreateConversationOutputDTO } from '../models';
// @ts-ignore
import type { CreateMessageDTO } from '../models';
// @ts-ignore
import type { MessageOutputDTO } from '../models';
// @ts-ignore
import type { NameConversationOutputDTO } from '../models';
/**
 * ConversationControllerApi - axios parameter creator
 * @export
 */
export const ConversationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patients/conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMessages: async (conversationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('getAllMessages', 'conversationId', conversationId)
            const localVarPath = `/patients/conversations/messages/{conversationId}`
                .replace(`{${"conversationId"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nameConversationDTO: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patients/conversations/{patientId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {CreateMessageDTO} createMessageDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: async (conversationId: string, createMessageDTO: CreateMessageDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conversationId' is not null or undefined
            assertParamExists('sendMessage', 'conversationId', conversationId)
            // verify required parameter 'createMessageDTO' is not null or undefined
            assertParamExists('sendMessage', 'createMessageDTO', createMessageDTO)
            const localVarPath = `/patients/conversations/messages/{conversationId}`
                .replace(`{${"conversationId"}}`, encodeURIComponent(String(conversationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConversationControllerApi - functional programming interface
 * @export
 */
export const ConversationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConversationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConversation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConversationOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConversation(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationControllerApi.createConversation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMessages(conversationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteConversationOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMessages(conversationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationControllerApi.getAllMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nameConversationDTO(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NameConversationOutputDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nameConversationDTO(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationControllerApi.nameConversationDTO']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {CreateMessageDTO} createMessageDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessage(conversationId: string, createMessageDTO: CreateMessageDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessage(conversationId, createMessageDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConversationControllerApi.sendMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConversationControllerApi - factory interface
 * @export
 */
export const ConversationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConversationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConversation(options?: RawAxiosRequestConfig): AxiosPromise<CreateConversationOutputDTO> {
            return localVarFp.createConversation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMessages(conversationId: string, options?: RawAxiosRequestConfig): AxiosPromise<CompleteConversationOutputDTO> {
            return localVarFp.getAllMessages(conversationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nameConversationDTO(options?: RawAxiosRequestConfig): AxiosPromise<Array<NameConversationOutputDTO>> {
            return localVarFp.nameConversationDTO(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} conversationId 
         * @param {CreateMessageDTO} createMessageDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(conversationId: string, createMessageDTO: CreateMessageDTO, options?: RawAxiosRequestConfig): AxiosPromise<MessageOutputDTO> {
            return localVarFp.sendMessage(conversationId, createMessageDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConversationControllerApi - interface
 * @export
 * @interface ConversationControllerApi
 */
export interface ConversationControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApiInterface
     */
    createConversation(options?: RawAxiosRequestConfig): AxiosPromise<CreateConversationOutputDTO>;

    /**
     * 
     * @param {string} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApiInterface
     */
    getAllMessages(conversationId: string, options?: RawAxiosRequestConfig): AxiosPromise<CompleteConversationOutputDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApiInterface
     */
    nameConversationDTO(options?: RawAxiosRequestConfig): AxiosPromise<Array<NameConversationOutputDTO>>;

    /**
     * 
     * @param {string} conversationId 
     * @param {CreateMessageDTO} createMessageDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApiInterface
     */
    sendMessage(conversationId: string, createMessageDTO: CreateMessageDTO, options?: RawAxiosRequestConfig): AxiosPromise<MessageOutputDTO>;

}

/**
 * ConversationControllerApi - object-oriented interface
 * @export
 * @class ConversationControllerApi
 * @extends {BaseAPI}
 */
export class ConversationControllerApi extends BaseAPI implements ConversationControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public createConversation(options?: RawAxiosRequestConfig) {
        return ConversationControllerApiFp(this.configuration).createConversation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} conversationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public getAllMessages(conversationId: string, options?: RawAxiosRequestConfig) {
        return ConversationControllerApiFp(this.configuration).getAllMessages(conversationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public nameConversationDTO(options?: RawAxiosRequestConfig) {
        return ConversationControllerApiFp(this.configuration).nameConversationDTO(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} conversationId 
     * @param {CreateMessageDTO} createMessageDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationControllerApi
     */
    public sendMessage(conversationId: string, createMessageDTO: CreateMessageDTO, options?: RawAxiosRequestConfig) {
        return ConversationControllerApiFp(this.configuration).sendMessage(conversationId, createMessageDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

