/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreatePatientDTO } from '../models';
// @ts-ignore
import type { LoginPatientDTO } from '../models';
// @ts-ignore
import type { PatientOutputDTO } from '../models';
// @ts-ignore
import type { PutLanguageDTO } from '../models';
// @ts-ignore
import type { PutOnboardedDTO } from '../models';
/**
 * PatientControllerApi - axios parameter creator
 * @export
 */
export const PatientControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentlyLoggedInPatient: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patients/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguage: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patients/language`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnboarded: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patients/onboarded`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginPatientDTO} loginPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTherapist: async (loginPatientDTO: LoginPatientDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginPatientDTO' is not null or undefined
            assertParamExists('loginTherapist', 'loginPatientDTO', loginPatientDTO)
            const localVarPath = `/patients/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginPatientDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTherapist: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patients/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePatientDTO} createPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPatient: async (createPatientDTO: CreatePatientDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPatientDTO' is not null or undefined
            assertParamExists('registerPatient', 'createPatientDTO', createPatientDTO)
            const localVarPath = `/patients/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPatientDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PutLanguageDTO} putLanguageDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLanguage: async (putLanguageDTO: PutLanguageDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'putLanguageDTO' is not null or undefined
            assertParamExists('setLanguage', 'putLanguageDTO', putLanguageDTO)
            const localVarPath = `/patients/language`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putLanguageDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PutOnboardedDTO} putOnboardedDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOnboarded: async (putOnboardedDTO: PutOnboardedDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'putOnboardedDTO' is not null or undefined
            assertParamExists('setOnboarded', 'putOnboardedDTO', putOnboardedDTO)
            const localVarPath = `/patients/onboarded`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putOnboardedDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientControllerApi - functional programming interface
 * @export
 */
export const PatientControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentlyLoggedInPatient(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentlyLoggedInPatient(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.getCurrentlyLoggedInPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLanguage(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLanguage(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.getLanguage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOnboarded(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOnboarded(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.getOnboarded']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginPatientDTO} loginPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginTherapist(loginPatientDTO: LoginPatientDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginTherapist(loginPatientDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.loginTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutTherapist(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutTherapist(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.logoutTherapist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePatientDTO} createPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPatient(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientOutputDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPatient(createPatientDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.registerPatient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PutLanguageDTO} putLanguageDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setLanguage(putLanguageDTO: PutLanguageDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setLanguage(putLanguageDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.setLanguage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PutOnboardedDTO} putOnboardedDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setOnboarded(putOnboardedDTO: PutOnboardedDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setOnboarded(putOnboardedDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientControllerApi.setOnboarded']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientControllerApi - factory interface
 * @export
 */
export const PatientControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentlyLoggedInPatient(options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO> {
            return localVarFp.getCurrentlyLoggedInPatient(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguage(options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO> {
            return localVarFp.getLanguage(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnboarded(options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO> {
            return localVarFp.getOnboarded(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginPatientDTO} loginPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginTherapist(loginPatientDTO: LoginPatientDTO, options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO> {
            return localVarFp.loginTherapist(loginPatientDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutTherapist(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logoutTherapist(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePatientDTO} createPatientDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPatient(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO> {
            return localVarFp.registerPatient(createPatientDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PutLanguageDTO} putLanguageDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLanguage(putLanguageDTO: PutLanguageDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setLanguage(putLanguageDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PutOnboardedDTO} putOnboardedDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOnboarded(putOnboardedDTO: PutOnboardedDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setOnboarded(putOnboardedDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientControllerApi - interface
 * @export
 * @interface PatientControllerApi
 */
export interface PatientControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    getCurrentlyLoggedInPatient(options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    getLanguage(options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    getOnboarded(options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO>;

    /**
     * 
     * @param {LoginPatientDTO} loginPatientDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    loginTherapist(loginPatientDTO: LoginPatientDTO, options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    logoutTherapist(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {CreatePatientDTO} createPatientDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    registerPatient(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig): AxiosPromise<PatientOutputDTO>;

    /**
     * 
     * @param {PutLanguageDTO} putLanguageDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    setLanguage(putLanguageDTO: PutLanguageDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {PutOnboardedDTO} putOnboardedDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApiInterface
     */
    setOnboarded(putOnboardedDTO: PutOnboardedDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * PatientControllerApi - object-oriented interface
 * @export
 * @class PatientControllerApi
 * @extends {BaseAPI}
 */
export class PatientControllerApi extends BaseAPI implements PatientControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public getCurrentlyLoggedInPatient(options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).getCurrentlyLoggedInPatient(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public getLanguage(options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).getLanguage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public getOnboarded(options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).getOnboarded(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginPatientDTO} loginPatientDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public loginTherapist(loginPatientDTO: LoginPatientDTO, options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).loginTherapist(loginPatientDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public logoutTherapist(options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).logoutTherapist(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePatientDTO} createPatientDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public registerPatient(createPatientDTO: CreatePatientDTO, options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).registerPatient(createPatientDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PutLanguageDTO} putLanguageDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public setLanguage(putLanguageDTO: PutLanguageDTO, options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).setLanguage(putLanguageDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PutOnboardedDTO} putOnboardedDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientControllerApi
     */
    public setOnboarded(putOnboardedDTO: PutOnboardedDTO, options?: RawAxiosRequestConfig) {
        return PatientControllerApiFp(this.configuration).setOnboarded(putOnboardedDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

